{
  "run_id": "3",
  "algorithm": "bmw_quark_cardinality",
  "size": 4,
  "backend": "aer_simulator",
  "metadata": {
    "backend": {
      "name": "aer_simulator",
      "configuration": {
        "backend_name": "aer_simulator",
        "backend_version": "0.17.2",
        "n_qubits": 27,
        "basis_gates": [
          "ccx",
          "ccz",
          "cp",
          "crx",
          "cry",
          "crz",
          "cswap",
          "csx",
          "cu",
          "cu1",
          "cu2",
          "cu3",
          "cx",
          "cy",
          "cz",
          "diagonal",
          "ecr",
          "h",
          "id",
          "mcp",
          "mcphase",
          "mcr",
          "mcrx",
          "mcry",
          "mcrz",
          "mcswap",
          "mcsx",
          "mcu",
          "mcu1",
          "mcu2",
          "mcu3",
          "mcx",
          "mcx_gray",
          "mcy",
          "mcz",
          "multiplexer",
          "p",
          "pauli",
          "r",
          "roerror",
          "rx",
          "rxx",
          "ry",
          "ryy",
          "rz",
          "rzx",
          "rzz",
          "s",
          "sdg",
          "store",
          "swap",
          "sx",
          "sxdg",
          "t",
          "tdg",
          "u",
          "u1",
          "u2",
          "u3",
          "unitary",
          "x",
          "y",
          "z",
          "break_loop",
          "continue_loop",
          "delay",
          "for_loop",
          "if_else",
          "initialize",
          "kraus",
          "qerror_loc",
          "quantum_channel",
          "reset",
          "roerror",
          "save_amplitudes",
          "save_amplitudes_sq",
          "save_clifford",
          "save_density_matrix",
          "save_expval",
          "save_expval_var",
          "save_matrix_product_state",
          "save_probabilities",
          "save_probabilities_dict",
          "save_stabilizer",
          "save_state",
          "save_statevector",
          "save_statevector_dict",
          "save_superop",
          "save_unitary",
          "set_density_matrix",
          "set_matrix_product_state",
          "set_stabilizer",
          "set_statevector",
          "set_superop",
          "set_unitary",
          "superop",
          "switch_case",
          "while_loop"
        ],
        "gates": [],
        "local": true,
        "simulator": true,
        "conditional": true,
        "memory": true,
        "max_shots": 1000000,
        "coupling_map": null,
        "dynamic_reprate_enabled": false,
        "description": "A C++ Qasm simulator with noise",
        "url": "https://github.com/Qiskit/qiskit-aer",
        "custom_instructions": [
          "break_loop",
          "continue_loop",
          "delay",
          "for_loop",
          "if_else",
          "initialize",
          "kraus",
          "qerror_loc",
          "quantum_channel",
          "reset",
          "roerror",
          "save_amplitudes",
          "save_amplitudes_sq",
          "save_clifford",
          "save_density_matrix",
          "save_expval",
          "save_expval_var",
          "save_matrix_product_state",
          "save_probabilities",
          "save_probabilities_dict",
          "save_stabilizer",
          "save_state",
          "save_statevector",
          "save_statevector_dict",
          "save_superop",
          "save_unitary",
          "set_density_matrix",
          "set_matrix_product_state",
          "set_stabilizer",
          "set_statevector",
          "set_superop",
          "set_unitary",
          "superop",
          "switch_case",
          "while_loop"
        ]
      },
      "properties": {}
    },
    "circuit": {
      "_id": "bmw_quark_cardinality_4",
      "algorithm": "bmw_quark_cardinality",
      "size": 4,
      "circuit": "OPENQASM 2.0;\ninclude \"qelib1.inc\";\nqreg q[4];\ncreg meas[4];\nrx(6.006735895579343) q[0];\nrz(1.304903297657757) q[0];\nrx(5.205272730965009) q[1];\nrz(0.9379672423735244) q[1];\nrx(3.2220464314480877) q[2];\nrz(0.8540080589393146) q[2];\nrx(4.329343885871547) q[3];\nrz(5.288856933750764) q[3];\nbarrier q[0],q[1],q[2],q[3];\nrxx(2.6735518805676657) q[0],q[1];\nrxx(6.012543404956273) q[1],q[2];\nrxx(5.185719590928789) q[2],q[3];\nbarrier q[0],q[1],q[2],q[3];\nrx(2.125069481984559) q[0];\nrz(3.6176102152986354) q[0];\nrx(4.733135208207287) q[1];\nrz(5.196847304624584) q[1];\nrx(5.864966885210837) q[2];\nrz(0.9110285368422897) q[2];\nrx(4.684618627355123) q[3];\nrz(0.8755706304852969) q[3];\nbarrier q[0],q[1],q[2],q[3];\nrxx(5.695888160944528) q[0],q[1];\nrxx(1.4207188874050238) q[1],q[2];\nrxx(5.36106346010849) q[2],q[3];\nbarrier q[0],q[1],q[2],q[3];\nrx(1.9246519120380525) q[0];\nrz(6.093623919970529) q[0];\nrx(3.2536483225524107) q[0];\nrx(2.026167409578137) q[1];\nrz(1.7745821253041683) q[1];\nrx(3.8067620398686097) q[1];\nrx(2.0971039305177235) q[2];\nrz(4.2640760024418105) q[2];\nrx(0.9702813337800618) q[2];\nrx(1.5693858735638762) q[3];\nrz(5.465706745619813) q[3];\nrx(3.772222268266399) q[3];\nbarrier q[0],q[1],q[2],q[3];\nrxx(1.6460880880040647) q[0],q[1];\nrxx(0.9388015080041642) q[1],q[2];\nrxx(0.8594715742269348) q[2],q[3];\nbarrier q[0],q[1],q[2],q[3];\nbarrier q[0],q[1],q[2],q[3];\nmeasure q[0] -> meas[0];\nmeasure q[1] -> meas[1];\nmeasure q[2] -> meas[2];\nmeasure q[3] -> meas[3];",
      "inverse": "OPENQASM 2.0;\ninclude \"qelib1.inc\";\nqreg q[4];\nrxx(-0.8594715742269348) q[2],q[3];\nrxx(-0.9388015080041642) q[1],q[2];\nrxx(-1.6460880880040647) q[0],q[1];\nbarrier q[0],q[1],q[2],q[3];\nrx(-3.772222268266399) q[3];\nrz(-5.465706745619813) q[3];\nrx(-1.5693858735638762) q[3];\nrx(-0.9702813337800618) q[2];\nrz(-4.2640760024418105) q[2];\nrx(-2.0971039305177235) q[2];\nrx(-3.8067620398686097) q[1];\nrz(-1.7745821253041683) q[1];\nrx(-2.026167409578137) q[1];\nrx(-3.2536483225524107) q[0];\nrz(-6.093623919970529) q[0];\nrx(-1.9246519120380525) q[0];\nbarrier q[0],q[1],q[2],q[3];\nrxx(-5.36106346010849) q[2],q[3];\nrxx(-1.4207188874050238) q[1],q[2];\nrxx(-5.695888160944528) q[0],q[1];\nbarrier q[0],q[1],q[2],q[3];\nrz(-0.8755706304852969) q[3];\nrx(-4.684618627355123) q[3];\nrz(-0.9110285368422897) q[2];\nrx(-5.864966885210837) q[2];\nrz(-5.196847304624584) q[1];\nrx(-4.733135208207287) q[1];\nrz(-3.6176102152986354) q[0];\nrx(-2.125069481984559) q[0];\nbarrier q[0],q[1],q[2],q[3];\nrxx(-5.185719590928789) q[2],q[3];\nrxx(-6.012543404956273) q[1],q[2];\nrxx(-2.6735518805676657) q[0],q[1];\nbarrier q[0],q[1],q[2],q[3];\nrz(-5.288856933750764) q[3];\nrx(-4.329343885871547) q[3];\nrz(-0.8540080589393146) q[2];\nrx(-3.2220464314480877) q[2];\nrz(-0.9379672423735244) q[1];\nrx(-5.205272730965009) q[1];\nrz(-1.304903297657757) q[0];\nrx(-6.006735895579343) q[0];",
      "mirror": "OPENQASM 2.0;\ninclude \"qelib1.inc\";\nqreg q[4];\ncreg meas[4];\nrx(6.006735895579343) q[0];\nrz(1.304903297657757) q[0];\nrx(5.205272730965009) q[1];\nrz(0.9379672423735244) q[1];\nrx(3.2220464314480877) q[2];\nrz(0.8540080589393146) q[2];\nrx(4.329343885871547) q[3];\nrz(5.288856933750764) q[3];\nbarrier q[0],q[1],q[2],q[3];\nrxx(2.6735518805676657) q[0],q[1];\nrxx(6.012543404956273) q[1],q[2];\nrxx(5.185719590928789) q[2],q[3];\nbarrier q[0],q[1],q[2],q[3];\nrx(2.125069481984559) q[0];\nrz(3.6176102152986354) q[0];\nrx(4.733135208207287) q[1];\nrz(5.196847304624584) q[1];\nrx(5.864966885210837) q[2];\nrz(0.9110285368422897) q[2];\nrx(4.684618627355123) q[3];\nrz(0.8755706304852969) q[3];\nbarrier q[0],q[1],q[2],q[3];\nrxx(5.695888160944528) q[0],q[1];\nrxx(1.4207188874050238) q[1],q[2];\nrxx(5.36106346010849) q[2],q[3];\nbarrier q[0],q[1],q[2],q[3];\nrx(1.9246519120380525) q[0];\nrz(6.093623919970529) q[0];\nrx(3.2536483225524107) q[0];\nrx(2.026167409578137) q[1];\nrz(1.7745821253041683) q[1];\nrx(3.8067620398686097) q[1];\nrx(2.0971039305177235) q[2];\nrz(4.2640760024418105) q[2];\nrx(0.9702813337800618) q[2];\nrx(1.5693858735638762) q[3];\nrz(5.465706745619813) q[3];\nrx(3.772222268266399) q[3];\nbarrier q[0],q[1],q[2],q[3];\nrxx(1.6460880880040647) q[0],q[1];\nrxx(0.9388015080041642) q[1],q[2];\nrxx(0.8594715742269348) q[2],q[3];\nbarrier q[0],q[1],q[2],q[3];\nrxx(-0.8594715742269348) q[2],q[3];\nrxx(-0.9388015080041642) q[1],q[2];\nrxx(-1.6460880880040647) q[0],q[1];\nbarrier q[0],q[1],q[2],q[3];\nrx(-3.772222268266399) q[3];\nrz(-5.465706745619813) q[3];\nrx(-1.5693858735638762) q[3];\nrx(-0.9702813337800618) q[2];\nrz(-4.2640760024418105) q[2];\nrx(-2.0971039305177235) q[2];\nrx(-3.8067620398686097) q[1];\nrz(-1.7745821253041683) q[1];\nrx(-2.026167409578137) q[1];\nrx(-3.2536483225524107) q[0];\nrz(-6.093623919970529) q[0];\nrx(-1.9246519120380525) q[0];\nbarrier q[0],q[1],q[2],q[3];\nrxx(-5.36106346010849) q[2],q[3];\nrxx(-1.4207188874050238) q[1],q[2];\nrxx(-5.695888160944528) q[0],q[1];\nbarrier q[0],q[1],q[2],q[3];\nrz(-0.8755706304852969) q[3];\nrx(-4.684618627355123) q[3];\nrz(-0.9110285368422897) q[2];\nrx(-5.864966885210837) q[2];\nrz(-5.196847304624584) q[1];\nrx(-4.733135208207287) q[1];\nrz(-3.6176102152986354) q[0];\nrx(-2.125069481984559) q[0];\nbarrier q[0],q[1],q[2],q[3];\nrxx(-5.185719590928789) q[2],q[3];\nrxx(-6.012543404956273) q[1],q[2];\nrxx(-2.6735518805676657) q[0],q[1];\nbarrier q[0],q[1],q[2],q[3];\nrz(-5.288856933750764) q[3];\nrx(-4.329343885871547) q[3];\nrz(-0.8540080589393146) q[2];\nrx(-3.2220464314480877) q[2];\nrz(-0.9379672423735244) q[1];\nrx(-5.205272730965009) q[1];\nrz(-1.304903297657757) q[0];\nrx(-6.006735895579343) q[0];\nbarrier q[0],q[1],q[2],q[3];\nmeasure q[0] -> meas[0];\nmeasure q[1] -> meas[1];\nmeasure q[2] -> meas[2];\nmeasure q[3] -> meas[3];",
      "created_at": "2025-09-29T09:23:08.245000",
      "qasm_version": "2.0"
    }
  },
  "artifacts": [
    "artifacts/3/history_circuit.jsonl",
    "artifacts/3/history_mirror.jsonl",
    "artifacts/3/stats.jsonl"
  ]
}