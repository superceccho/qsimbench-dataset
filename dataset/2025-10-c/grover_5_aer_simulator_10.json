{
  "run_id": "10",
  "algorithm": "grover",
  "size": 5,
  "backend": "aer_simulator",
  "metadata": {
    "backend": {
      "name": "aer_simulator",
      "configuration": {
        "backend_name": "aer_simulator",
        "backend_version": "0.17.2",
        "n_qubits": 27,
        "basis_gates": [
          "ccx",
          "ccz",
          "cp",
          "crx",
          "cry",
          "crz",
          "cswap",
          "csx",
          "cu",
          "cu1",
          "cu2",
          "cu3",
          "cx",
          "cy",
          "cz",
          "diagonal",
          "ecr",
          "h",
          "id",
          "mcp",
          "mcphase",
          "mcr",
          "mcrx",
          "mcry",
          "mcrz",
          "mcswap",
          "mcsx",
          "mcu",
          "mcu1",
          "mcu2",
          "mcu3",
          "mcx",
          "mcx_gray",
          "mcy",
          "mcz",
          "multiplexer",
          "p",
          "pauli",
          "r",
          "roerror",
          "rx",
          "rxx",
          "ry",
          "ryy",
          "rz",
          "rzx",
          "rzz",
          "s",
          "sdg",
          "store",
          "swap",
          "sx",
          "sxdg",
          "t",
          "tdg",
          "u",
          "u1",
          "u2",
          "u3",
          "unitary",
          "x",
          "y",
          "z",
          "break_loop",
          "continue_loop",
          "delay",
          "for_loop",
          "if_else",
          "initialize",
          "kraus",
          "qerror_loc",
          "quantum_channel",
          "reset",
          "roerror",
          "save_amplitudes",
          "save_amplitudes_sq",
          "save_clifford",
          "save_density_matrix",
          "save_expval",
          "save_expval_var",
          "save_matrix_product_state",
          "save_probabilities",
          "save_probabilities_dict",
          "save_stabilizer",
          "save_state",
          "save_statevector",
          "save_statevector_dict",
          "save_superop",
          "save_unitary",
          "set_density_matrix",
          "set_matrix_product_state",
          "set_stabilizer",
          "set_statevector",
          "set_superop",
          "set_unitary",
          "superop",
          "switch_case",
          "while_loop"
        ],
        "gates": [],
        "local": true,
        "simulator": true,
        "conditional": true,
        "memory": true,
        "max_shots": 1000000,
        "coupling_map": null,
        "dynamic_reprate_enabled": false,
        "description": "A C++ Qasm simulator with noise",
        "url": "https://github.com/Qiskit/qiskit-aer",
        "custom_instructions": [
          "break_loop",
          "continue_loop",
          "delay",
          "for_loop",
          "if_else",
          "initialize",
          "kraus",
          "qerror_loc",
          "quantum_channel",
          "reset",
          "roerror",
          "save_amplitudes",
          "save_amplitudes_sq",
          "save_clifford",
          "save_density_matrix",
          "save_expval",
          "save_expval_var",
          "save_matrix_product_state",
          "save_probabilities",
          "save_probabilities_dict",
          "save_stabilizer",
          "save_state",
          "save_statevector",
          "save_statevector_dict",
          "save_superop",
          "save_unitary",
          "set_density_matrix",
          "set_matrix_product_state",
          "set_stabilizer",
          "set_statevector",
          "set_superop",
          "set_unitary",
          "superop",
          "switch_case",
          "while_loop"
        ]
      },
      "properties": {}
    },
    "circuit": {
      "_id": "grover_5",
      "algorithm": "grover",
      "size": 5,
      "circuit": "OPENQASM 2.0;\ninclude \"qelib1.inc\";\ngate mcphase(param0) q0,q1,q2,q3,q4 { h q4; cx q1,q4; tdg q4; cx q0,q4; t q4; cx q1,q4; tdg q4; cx q0,q4; t q1; t q4; h q4; cx q0,q1; t q0; tdg q1; cx q0,q1; rz(-pi/4) q4; h q4; cx q3,q4; tdg q4; cx q2,q4; t q4; cx q3,q4; tdg q4; cx q2,q4; t q3; t q4; h q4; cx q2,q3; t q2; tdg q3; cx q2,q3; rz(pi/4) q4; h q4; cx q1,q4; tdg q4; cx q0,q4; t q4; cx q1,q4; tdg q4; cx q0,q4; t q1; t q4; h q4; cx q0,q1; t q0; tdg q1; cx q0,q1; rz(-pi/4) q4; h q4; cx q3,q4; tdg q4; cx q2,q4; t q4; cx q3,q4; tdg q4; cx q2,q4; t q3; t q4; h q4; cx q2,q3; t q2; tdg q3; cx q2,q3; rz(pi/4) q4; h q3; cx q1,q3; tdg q3; cx q0,q3; t q3; cx q1,q3; tdg q3; cx q0,q3; t q1; t q3; h q3; cx q0,q1; t q0; tdg q1; cx q0,q1; rz(-pi/8) q3; cx q2,q3; rz(pi/8) q3; h q3; cx q1,q3; tdg q3; cx q0,q3; t q3; cx q1,q3; tdg q3; cx q0,q3; t q1; t q3; h q3; cx q0,q1; t q0; tdg q1; cx q0,q1; rz(-pi/8) q3; cx q2,q3; rz(pi/8) q3; cx q0,q2; rz(-pi/16) q2; cx q1,q2; rz(pi/16) q2; cx q0,q2; rz(-pi/16) q2; cx q1,q2; rz(pi/16) q2; crz(pi/8) q0,q1; p(pi/16) q0; }\ngate mcx q0,q1,q2,q3 { h q3; p(pi/8) q0; p(pi/8) q1; p(pi/8) q2; p(pi/8) q3; cx q0,q1; p(-pi/8) q1; cx q0,q1; cx q1,q2; p(-pi/8) q2; cx q0,q2; p(pi/8) q2; cx q1,q2; p(-pi/8) q2; cx q0,q2; cx q2,q3; p(-pi/8) q3; cx q1,q3; p(pi/8) q3; cx q2,q3; p(-pi/8) q3; cx q0,q3; p(pi/8) q3; cx q2,q3; p(-pi/8) q3; cx q1,q3; p(pi/8) q3; cx q2,q3; p(-pi/8) q3; cx q0,q3; h q3; }\ngate gate_Q q0,q1,q2,q3,q4 { mcphase(pi) q0,q1,q2,q3,q4; h q0; h q1; h q2; h q3; x q0; x q1; x q2; x q3; h q3; mcx q0,q1,q2,q3; h q3; x q0; x q1; x q2; x q3; h q0; h q1; h q2; h q3; }\nqreg q[4];\nqreg flag[1];\ncreg meas[5];\nh q[0];\nh q[1];\nh q[2];\nh q[3];\nx flag[0];\ngate_Q q[0],q[1],q[2],q[3],flag[0];\ngate_Q q[0],q[1],q[2],q[3],flag[0];\ngate_Q q[0],q[1],q[2],q[3],flag[0];\nbarrier q[0],q[1],q[2],q[3],flag[0];\nmeasure q[0] -> meas[0];\nmeasure q[1] -> meas[1];\nmeasure q[2] -> meas[2];\nmeasure q[3] -> meas[3];\nmeasure flag[0] -> meas[4];",
      "inverse": "OPENQASM 2.0;\ninclude \"qelib1.inc\";\ngate mcx q0,q1,q2,q3 { h q3; p(pi/8) q0; p(pi/8) q1; p(pi/8) q2; p(pi/8) q3; cx q0,q1; p(-pi/8) q1; cx q0,q1; cx q1,q2; p(-pi/8) q2; cx q0,q2; p(pi/8) q2; cx q1,q2; p(-pi/8) q2; cx q0,q2; cx q2,q3; p(-pi/8) q3; cx q1,q3; p(pi/8) q3; cx q2,q3; p(-pi/8) q3; cx q0,q3; p(pi/8) q3; cx q2,q3; p(-pi/8) q3; cx q1,q3; p(pi/8) q3; cx q2,q3; p(-pi/8) q3; cx q0,q3; h q3; }\ngate mcphase(param0) q0,q1,q2,q3,q4 { h q4; cx q1,q4; tdg q4; cx q0,q4; t q4; cx q1,q4; tdg q4; cx q0,q4; t q1; t q4; h q4; cx q0,q1; t q0; tdg q1; cx q0,q1; rz(pi/4) q4; h q4; cx q3,q4; tdg q4; cx q2,q4; t q4; cx q3,q4; tdg q4; cx q2,q4; t q3; t q4; h q4; cx q2,q3; t q2; tdg q3; cx q2,q3; rz(-pi/4) q4; h q4; cx q1,q4; tdg q4; cx q0,q4; t q4; cx q1,q4; tdg q4; cx q0,q4; t q1; t q4; h q4; cx q0,q1; t q0; tdg q1; cx q0,q1; rz(pi/4) q4; h q4; cx q3,q4; tdg q4; cx q2,q4; t q4; cx q3,q4; tdg q4; cx q2,q4; t q3; t q4; h q4; cx q2,q3; t q2; tdg q3; cx q2,q3; rz(-pi/4) q4; h q3; cx q1,q3; tdg q3; cx q0,q3; t q3; cx q1,q3; tdg q3; cx q0,q3; t q1; t q3; h q3; cx q0,q1; t q0; tdg q1; cx q0,q1; rz(pi/8) q3; cx q2,q3; rz(-pi/8) q3; h q3; cx q1,q3; tdg q3; cx q0,q3; t q3; cx q1,q3; tdg q3; cx q0,q3; t q1; t q3; h q3; cx q0,q1; t q0; tdg q1; cx q0,q1; rz(pi/8) q3; cx q2,q3; rz(-pi/8) q3; cx q0,q2; rz(pi/16) q2; cx q1,q2; rz(-pi/16) q2; cx q0,q2; rz(pi/16) q2; cx q1,q2; rz(-pi/16) q2; crz(-pi/8) q0,q1; p(-pi/16) q0; }\ngate gate_Q_dg q0,q1,q2,q3,q4 { h q3; h q2; h q1; h q0; x q3; x q2; x q1; x q0; h q3; mcx q0,q1,q2,q3; h q3; x q3; x q2; x q1; x q0; h q3; h q2; h q1; h q0; mcphase(-pi) q0,q1,q2,q3,q4; }\nqreg q[4];\nqreg flag[1];\ngate_Q_dg q[0],q[1],q[2],q[3],flag[0];\ngate_Q_dg q[0],q[1],q[2],q[3],flag[0];\ngate_Q_dg q[0],q[1],q[2],q[3],flag[0];\nx flag[0];\nh q[3];\nh q[2];\nh q[1];\nh q[0];",
      "mirror": "OPENQASM 2.0;\ninclude \"qelib1.inc\";\ngate mcphase(param0) q0,q1,q2,q3,q4 { h q4; cx q1,q4; tdg q4; cx q0,q4; t q4; cx q1,q4; tdg q4; cx q0,q4; t q1; t q4; h q4; cx q0,q1; t q0; tdg q1; cx q0,q1; rz(-pi/4) q4; h q4; cx q3,q4; tdg q4; cx q2,q4; t q4; cx q3,q4; tdg q4; cx q2,q4; t q3; t q4; h q4; cx q2,q3; t q2; tdg q3; cx q2,q3; rz(pi/4) q4; h q4; cx q1,q4; tdg q4; cx q0,q4; t q4; cx q1,q4; tdg q4; cx q0,q4; t q1; t q4; h q4; cx q0,q1; t q0; tdg q1; cx q0,q1; rz(-pi/4) q4; h q4; cx q3,q4; tdg q4; cx q2,q4; t q4; cx q3,q4; tdg q4; cx q2,q4; t q3; t q4; h q4; cx q2,q3; t q2; tdg q3; cx q2,q3; rz(pi/4) q4; h q3; cx q1,q3; tdg q3; cx q0,q3; t q3; cx q1,q3; tdg q3; cx q0,q3; t q1; t q3; h q3; cx q0,q1; t q0; tdg q1; cx q0,q1; rz(-pi/8) q3; cx q2,q3; rz(pi/8) q3; h q3; cx q1,q3; tdg q3; cx q0,q3; t q3; cx q1,q3; tdg q3; cx q0,q3; t q1; t q3; h q3; cx q0,q1; t q0; tdg q1; cx q0,q1; rz(-pi/8) q3; cx q2,q3; rz(pi/8) q3; cx q0,q2; rz(-pi/16) q2; cx q1,q2; rz(pi/16) q2; cx q0,q2; rz(-pi/16) q2; cx q1,q2; rz(pi/16) q2; crz(pi/8) q0,q1; p(pi/16) q0; }\ngate mcx q0,q1,q2,q3 { h q3; p(pi/8) q0; p(pi/8) q1; p(pi/8) q2; p(pi/8) q3; cx q0,q1; p(-pi/8) q1; cx q0,q1; cx q1,q2; p(-pi/8) q2; cx q0,q2; p(pi/8) q2; cx q1,q2; p(-pi/8) q2; cx q0,q2; cx q2,q3; p(-pi/8) q3; cx q1,q3; p(pi/8) q3; cx q2,q3; p(-pi/8) q3; cx q0,q3; p(pi/8) q3; cx q2,q3; p(-pi/8) q3; cx q1,q3; p(pi/8) q3; cx q2,q3; p(-pi/8) q3; cx q0,q3; h q3; }\ngate gate_Q q0,q1,q2,q3,q4 { mcphase(pi) q0,q1,q2,q3,q4; h q0; h q1; h q2; h q3; x q0; x q1; x q2; x q3; h q3; mcx q0,q1,q2,q3; h q3; x q0; x q1; x q2; x q3; h q0; h q1; h q2; h q3; }\ngate mcphase_129225701900208(param0) q0,q1,q2,q3,q4 { h q4; cx q1,q4; tdg q4; cx q0,q4; t q4; cx q1,q4; tdg q4; cx q0,q4; t q1; t q4; h q4; cx q0,q1; t q0; tdg q1; cx q0,q1; rz(pi/4) q4; h q4; cx q3,q4; tdg q4; cx q2,q4; t q4; cx q3,q4; tdg q4; cx q2,q4; t q3; t q4; h q4; cx q2,q3; t q2; tdg q3; cx q2,q3; rz(-pi/4) q4; h q4; cx q1,q4; tdg q4; cx q0,q4; t q4; cx q1,q4; tdg q4; cx q0,q4; t q1; t q4; h q4; cx q0,q1; t q0; tdg q1; cx q0,q1; rz(pi/4) q4; h q4; cx q3,q4; tdg q4; cx q2,q4; t q4; cx q3,q4; tdg q4; cx q2,q4; t q3; t q4; h q4; cx q2,q3; t q2; tdg q3; cx q2,q3; rz(-pi/4) q4; h q3; cx q1,q3; tdg q3; cx q0,q3; t q3; cx q1,q3; tdg q3; cx q0,q3; t q1; t q3; h q3; cx q0,q1; t q0; tdg q1; cx q0,q1; rz(pi/8) q3; cx q2,q3; rz(-pi/8) q3; h q3; cx q1,q3; tdg q3; cx q0,q3; t q3; cx q1,q3; tdg q3; cx q0,q3; t q1; t q3; h q3; cx q0,q1; t q0; tdg q1; cx q0,q1; rz(pi/8) q3; cx q2,q3; rz(-pi/8) q3; cx q0,q2; rz(pi/16) q2; cx q1,q2; rz(-pi/16) q2; cx q0,q2; rz(pi/16) q2; cx q1,q2; rz(-pi/16) q2; crz(-pi/8) q0,q1; p(-pi/16) q0; }\ngate gate_Q_dg q0,q1,q2,q3,q4 { h q3; h q2; h q1; h q0; x q3; x q2; x q1; x q0; h q3; mcx q0,q1,q2,q3; h q3; x q3; x q2; x q1; x q0; h q3; h q2; h q1; h q0; mcphase_129225701900208(-pi) q0,q1,q2,q3,q4; }\nqreg q[4];\nqreg flag[1];\ncreg meas[5];\nh q[0];\nh q[1];\nh q[2];\nh q[3];\nx flag[0];\ngate_Q q[0],q[1],q[2],q[3],flag[0];\ngate_Q q[0],q[1],q[2],q[3],flag[0];\ngate_Q q[0],q[1],q[2],q[3],flag[0];\nbarrier q[0],q[1],q[2],q[3],flag[0];\ngate_Q_dg q[0],q[1],q[2],q[3],flag[0];\ngate_Q_dg q[0],q[1],q[2],q[3],flag[0];\ngate_Q_dg q[0],q[1],q[2],q[3],flag[0];\nx flag[0];\nh q[3];\nh q[2];\nh q[1];\nh q[0];\nbarrier q[0],q[1],q[2],q[3],flag[0];\nmeasure q[0] -> meas[0];\nmeasure q[1] -> meas[1];\nmeasure q[2] -> meas[2];\nmeasure q[3] -> meas[3];\nmeasure flag[0] -> meas[4];",
      "created_at": "2025-09-29T09:23:08.850000",
      "qasm_version": "2.0"
    }
  },
  "artifacts": [
    "artifacts/10/history_circuit.jsonl",
    "artifacts/10/history_mirror.jsonl",
    "artifacts/10/stats.jsonl"
  ]
}